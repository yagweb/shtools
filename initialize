#install OS
	#remove the partitions of SSD, recreate for root and swap.

#network
	ifconfig | grep HWaddr
	ethtool ethXXX
	#update /etc/network/interfaces file, or use NetworkManager

#copy shtools, modify file .rcbash
	#export PATH="/home/XXX/shtools:$PATH"

	#modified file proxy.ini

	#usage
	. proxy
	. proxy apt-on
	. proxy apt-nocache-on

#vi up-down become ABCD issue
	sudo apt-get remove vim-common
	sudo apt-get install vim

#ssh
	apt-get install ssh-server
	ps -el | grep ssh  #check
	sudo /etc/init.d/ssh start

#git
	apt-get install git
	ssh-keygen

#xrdp + mate
    #if not use mate ubuntu
    echo "mate-session">~/.xsession
    
	apt-get install xrdp
	sudo vi /etc/xrdp/startwm.sh
	#append
	  . /etc/environment
	  . /etc/profile

	sudo vi /etc/xrdp/xrdp.ini
	#insert
	  [xrdp1]
	  name=vnc-exists
	  lib=libvnc.so
	  username=askXXX
	  password=ask
	  ip=127.0.0.1
	  port=ask5910

	sudo service xrdp restart 

# now we can use Remote Desktop
# mate has Pluma, Pluma is based on gedit, So we don't need to install gedit.

#/etx/fstab
	#mount local device and nfs
	sudo pluma /etc/fatab
    #for nfs
    #ip:path      nfs
	sudo mount -a

    #check
    sudo df
    sudo mount -l

#samba
	sudo apt-get install samba
    #usually I will add two users, root the current user
	sudo smbpasswd -a XXXX
	sudo pluma /etc/samba/smb.conf

	#append:
	  [root]
		comment = root
		path = /
		browseable = yes
		read only = no
		valid users = XX, @group

    #test
    testparm

	sudo /etc/init.d/samba restart
    #sudo service smbd restart

#nfs
	#on both client and server linux machine,
	sudo apt-get install nfs-kernel-server
	sudo service nfs-kernel-server start

    #server setting
    sudo vi /etc/exports
       #no blank follow the comma!!!!
      <loacalpath> *(insecure,rw,sync,no_subtree_check,no_root_squash)
    #reload config file
    sudo exportfs -avr
    service nfs-kernel-server reload 

    #client setting
    sudo mount -t nfs ip:<path>  <localpath>

    use ip = localhost, to mount test

#cifs
	sudo apt-get install cifs-utils
	#sudo mkdir <local_path>
	#sudo mount -t cifs -o username=XXX,password=XXX,uid=XXX //winIP/folder/ <local_path>

#application softwares
	(runfile should use 'bash/sh' to install, not '.')

    gcc

	anaconda 
		#spyder cannot input bug, XKEYBOARD extension not present on the X server
        echo "export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb" >> .bashrc
        source .bashrc

	cmake, blas,..
	mysql
	FAST
    CUDA
		"you appear to be running an X server"
        ctrl+alt+F1  #switch to tty1 user mode, GUI is running backend
        
		#close X server service
        sudo /etc/init.d/XXdm stop
        #XXdm: lightdm for Unity, kdm for Kubuntu, gdm for gnome, 
        #check, ctrl+alt+F7, shift back to GUI, should not show any desktop now
		
		#xrdp remote desktop could not be closed by stop xrdp service!
        #use my vnckill script!!
        #stop the xrdp in case some one log in during the installation
        sudo service xrdp stop

		#check, 
        #ls -a /tmp/.X*

		sudo service xrdp start
		sudo /etc/init.d/XXXX start

		runfile, Run 'sudo sh XXXX.run  --silence'
        sudo reboot
        
		echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64/:$LD_LIBRARY_PATH" >> .bashrc
		echo "export PATH=/usr/local/cuda/bin/:$PATH" >> .bashrc

	cuDNN
		#file can be copied to any place, here we put it to cuda
		tar -xvf ...
		sudo cp <the file cudnn.h> /usr/local/cuda/include
        sudo cp <the files libcudnn*> /usr/local/cuda/lib64
		sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*
   		append CuDNN path to CUDA_HOME

	TensorFlow #better installed in virtualenv,
		pip install --upgrade pip
		pip install --upgrade --ignore-installed setuptools
		sudo apt-get install --upgrade tensorflow-gpu
        
		#test
		import tensorflow as tf
		print(tf.__version__)

	PyTorch

	
